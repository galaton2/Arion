# -*- coding: utf-8 -*-
"""
Telegram bot: Buy virtual numbers, Telegram Stars & Premium, manage TON balance, and referrals.
¬© 2025 Barry
"""

import time
import uuid
import threading
import logging
import requests
import binascii

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import pyrebase

from datetime import datetime, timedelta

# === Assets & Constants ===
WELCOME_GIF     = "https://raw.githubusercontent.com/qnexst/404token/main/11.gif"
WALLET_GIF      = "https://raw.githubusercontent.com/qnexst/404token/8f8814776022d61ff67127f7b4bc226499b5a948/wallet.gif"
SERVICE_IMG     = "https://raw.githubusercontent.com/qnexst/404token/main/service.jpg"

BOT_TOKEN       = ""
BOT_USERNAME    = "Arion_Dbot"  # without @
SIM_TOKEN       = ""
CHANNEL_NAME    = "ArionHub"
SUPPORT_USER    = "ArionAdmin"
DEPOSIT_ADDRESS = "UQBRiESLIYaCIL6q9s9frfp3ZGz2Yp29FBycV0GIRZdeY9zP"
TON_API_KEY     = ""
RUN_IN_MAINNET  = True
API_BASE_URL    = "https://toncenter.com" if RUN_IN_MAINNET else "https://testnet.toncenter.com"

# Supported languages
LANGUAGES = {
    "en": "English",
    "ru": "–†—É—Å—Å–∫–∏–π"
}

# === Firebase Real-Time Database Config ===
firebase_config = {
   
}

# === Initialization ===
firebase = pyrebase.initialize_app(firebase_config)
db       = firebase.database()
logging.basicConfig(level=logging.INFO)
bot      = telebot.TeleBot(BOT_TOKEN, parse_mode="MARKDOWN")


# === In-memory Stores ===
pending_topup_memos     = {}  # –¥–ª—è /topup: memo -> user_id
last_topup_lts          = {}  # memo -> last lt
pending_discount_memos  = {}  # –¥–ª—è —Å–∫–∏–¥–∫–∏: memo -> user_id
last_discount_lts       = {}  # memo -> last lt

NUMBER_SERVICES        = ["telegram","aliexpress","amazon","discord","ebay","facebook","airbnb","tiktok","whatsapp"]
TARIFFS                = [50,100,500,1000,2500,5000]
STAR_PRICES            = {50:0.323,100:0.611,500:2.999,1000:5.899,2500:14,5000:28}
star_selection         = {}
pending_star_orders    = {}
PREMIUM_MONTHS         = [3,6,12]
PREMIUM_PRICES         = {3:4.2,6:5.6,12:10}
premium_selection      = {}
pending_premium_orders = {}
ai_sessions = set()

# === Common Buttons ===
BTN_CANCEL = InlineKeyboardButton("‚ùå", callback_data="start_over")

# --------------------------------------------------------------------------- #
#                              Firebase Helpers                               #
# --------------------------------------------------------------------------- #
def check_user(uid):
    return db.child("users").child(uid).get().val() is not None

def create_user(uid, username):
    db.child("users").child(uid).set({
        "username":          username or "",
        "balance":           0.0,
        "is_admin":          False,
        "history":           [],
        "referrer":          "",
        "referrals_count":   0,
        "referrals_earned":  0.0,
        "lang":              ""
    })

def update_username(uid, username):
    db.child("users").child(uid).update({"username": username or ""})

def fetch_balance(uid):
    val = db.child("users").child(uid).child("balance").get().val()
    return float(val) if val else 0.0

def save_balance(uid, amount):
    db.child("users").child(uid).update({"balance": amount})

def append_history(uid, record):
    hist = db.child("users").child(uid).child("history").get().val() or []
    hist.append(record)
    db.child("users").child(uid).update({"history": hist})

def get_username(user):
    return user.username or user.first_name or "User"

def get_lang(uid):
    lang = db.child("users").child(uid).child("lang").get().val()
    return lang if lang in LANGUAGES else "en"


# --------------------------------------------------------------------------- #
#                              Localization                                   #
# --------------------------------------------------------------------------- #

def t(uid, key, **kwargs):
    lang = get_lang(uid)
    texts = {
        "choose_lang": {
            "en": "Please select your language:",
            "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
        },
        "welcome": {
            "en": (
                "‚≠ê Welcome, <code>@{username}</code>!\n\n"
                "üÜî Your ID: <code>{user_id}</code>\n\n"
                "<i>Note: Stars, Numbers, AI & Premium purchases available now.\n\n</i>"
                "5% off all items for PUNK NFT holders! To redeem, send /discount"
            ),
            "ru": (
                "‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <code>@{username}</code>!\n\n"
                "üÜî –í–∞—à ID: <code>{user_id}</code>!\n\n"
                "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω—ã –∑–≤—ë–∑–¥—ã, –Ω–æ–º–µ—Ä–∞, AI –∏ –ø—Ä–µ–º–∏—É–º.</i>\n\n"
                "–°–∫–∏–¥–∫–∞ 5% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π NFT PUNK! –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /discount"
            )
        },
        "wallet": {
            "en": "üí≥ *Your Wallet*\n\nBalance: {bal:.2f} TON",
            "ru": "üí≥ *–í–∞—à –∫–æ—à–µ–ª—ë–∫*\n\n–ë–∞–ª–∞–Ω—Å: {bal:.2f} TON"
        },
       # –í –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:

    # ‚Ä¶
    'top_up': {
        'en': (
            "1Ô∏è‚É£ *Copy Address:*\n"
            "    `{address}`\n\n"
            "2Ô∏è‚É£ *Send any amount of TON*\n\n"
            "3Ô∏è‚É£ *Use Memo:*\n"
            "    `{memo}`\n\n"
            "_Window expires in 20 minutes._"
        ),
        'ru': (
            "1Ô∏è‚É£ *–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞–¥—Ä–µ—Å:*\n"
            "    `{address}`\n\n"
            "2Ô∏è‚É£ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON*\n\n"
            "3Ô∏è‚É£ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ memo:*\n"
            "    `{memo}`\n\n"
            "_–û–∫–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç._"
        )
    },
        "no_balance": {
            "en": "‚ùå Insufficient balance.",
            "ru": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
        },
        "services": {
            "en": "üõ† *Our Services*",
            "ru": "üõ† *–ù–∞—à–∏ –°–µ—Ä–≤–∏—Å—ã*"
        },
        "coming_soon": {
            "en": "üöß Coming soon!",
            "ru": "üöß –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!"
        },
        "enter_username": {
            "en": "üõí Enter the @username of the recipient:",
            "ru": "üõí –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è:"
        }
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, history)
    }
    return texts[key][lang].format(**kwargs)


# --------------------------------------------------------------------------- #
#                              Welcome & Menu                                 #
# --------------------------------------------------------------------------- #

@bot.message_handler(commands=['start'])
def cmd_start(msg):
    uid = str(msg.from_user.id)
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å @username
    if not msg.from_user.username:
        lang = get_lang(uid)
        bot.send_message(
            msg.chat.id,
            "üö´ Please set a @username in your Telegram settings so the bot can work correctly."
            if lang == "en"
            else "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª.",
        )
        return

    uname = get_username(msg.from_user)
    parts = msg.text.split()
    is_new = not check_user(uid)
    if is_new:
        create_user(uid, uname)
        # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(parts) > 1 and parts[1] != uid and check_user(parts[1]):
            db.child("users").child(uid).update({"referrer": parts[1]})
            cnt = db.child("users").child(parts[1]).child("referrals_count").get().val() or 0
            db.child("users").child(parts[1]).update({"referrals_count": cnt + 1})
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
        kb = InlineKeyboardMarkup(row_width=2)
        for code, label in LANGUAGES.items():
            kb.add(InlineKeyboardButton(label, callback_data=f"set_lang_{code}"))
        bot.send_message(msg.chat.id, t(uid, "choose_lang"), reply_markup=kb)
    else:
        update_username(uid, uname)
        send_welcome(msg.chat.id, uid, uname)

@bot.callback_query_handler(lambda c: c.data.startswith("set_lang_"))
def cb_set_lang(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    lang = c.data.split("_")[2]
    db.child("users").child(uid).update({"lang": lang})
    bot.delete_message(c.message.chat.id, c.message.message_id)
    send_welcome(c.message.chat.id, uid, get_username(c.from_user))

@bot.callback_query_handler(lambda c: c.data == "start_over")
def cb_start_over(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    send_welcome(c.message.chat.id, str(c.from_user.id), get_username(c.from_user))

def send_welcome(chat_id, uid, username):
    caption = t(uid, "welcome", username=username, user_id=uid)
    lang = get_lang(uid)
    kb = InlineKeyboardMarkup(row_width=2)
    btn_wallet   = "üíº Wallet"    if lang=="en" else "üíº –ö–æ—à–µ–ª—ë–∫"
    btn_services = "üåü Services"  if lang=="en" else "üåü –°–µ—Ä–≤–∏—Å—ã"
    btn_channel  = "üì∫ Channel"   if lang=="en" else "üì∫ –ö–∞–Ω–∞–ª"
    btn_support  = "‚úâÔ∏è Support"   if lang=="en" else "‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    btn_refs     = "üë• Referrals" if lang=="en" else "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã"

    kb.add(
        InlineKeyboardButton(btn_wallet,   callback_data="wallet"),
        InlineKeyboardButton(btn_services, callback_data="services")
    )
    kb.add(
        InlineKeyboardButton(btn_channel,  url=f"https://t.me/{CHANNEL_NAME}"),
        InlineKeyboardButton(btn_support,  url=f"https://t.me/{SUPPORT_USER}")
    )
    kb.add(InlineKeyboardButton(btn_refs, callback_data="referrals"))

    bot.send_animation(
        chat_id,
        WELCOME_GIF,
        caption=caption,
        parse_mode="HTML",     # –≤–∞–∂–Ω–æ –¥–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        reply_markup=kb
    )

# --------------------------------------------------------------------------- #
#                               Wallet Flow                                   #
# --------------------------------------------------------------------------- #
@bot.callback_query_handler(lambda c: c.data=="wallet")
def cb_wallet(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    uid = str(c.from_user.id)
    bal = fetch_balance(uid)
    caption = t(uid, "wallet", bal=bal)
    lang = get_lang(uid)
    btn_top_up = "üí∏ Top Up" if lang=="en" else "üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å"
    btn_hist   = "üóí History" if lang=="en" else "üóí –ò—Å—Ç–æ—Ä–∏—è"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(btn_top_up, callback_data="top_up"),
        InlineKeyboardButton(btn_hist,   callback_data="history"),
        BTN_CANCEL
    )
    msg = bot.send_animation(c.message.chat.id, WALLET_GIF, caption=caption, reply_markup=kb)
    threading.Timer(1200, lambda: bot.delete_message(msg.chat.id, msg.message_id)).start()

# --------------------------------------------------------------------------- #
#                            Services & Submenus                              #
# --------------------------------------------------------------------------- #

@bot.callback_query_handler(lambda c: c.data == "services")
def cb_services(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid     = str(c.from_user.id)
    caption = t(uid, "services")
    lang    = get_lang(uid)

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(
            "‚≠êStars & Premium" if lang=="en" else "‚≠êStars & Premium",
            callback_data="telegram_services"
        ),
        InlineKeyboardButton(
            "üõ° VPN" if lang=="en" else "üõ° VPN ",
            callback_data="vpn"
        )
    )
    kb.add(
        InlineKeyboardButton(
            "New Account Number" if lang=="en" else "‚òéÔ∏è –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä",
            callback_data="buy_number"
        ),
        InlineKeyboardButton(
            "üéÆ Entertainment" if lang=="en" else "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            callback_data="entertainment"
        )
    )
    kb.add(
        InlineKeyboardButton(
            "‚ú® AI Tools" if lang=="en" else "‚ú® AI ",
            callback_data="ai"
        ),
        InlineKeyboardButton(
            "üíª Dev Zone" if lang=="en" else "üíª –ó–æ–Ω–∞ –†–∞–∑—Ä–∞–±.",
            callback_data="dev_zone"
        )
    )
    kb.add(BTN_CANCEL)
    bot.send_photo(c.message.chat.id, SERVICE_IMG, caption=caption, reply_markup=kb)




@bot.callback_query_handler(lambda c: c.data == "entertainment")
def cb_entertainment(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid  = str(c.from_user.id)
    lang = get_lang(uid)
    text = (
        "üéÆ *Entertainment Services*\n\n"
        "‚Ä¢ *District Clash* ‚Äî capture districts, PvP battles, upgrade fighters, earn PUNK tokens.\n\n"
        "‚Ä¢ *Punk City* ‚Äî TON blockchain PvP bot with NFT avatars and Play-to-Earn."
        if lang=="en" else
        "üéÆ *–°–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π*\n\n"
        "‚Ä¢ *District Clash* ‚Äî –∑–∞—Ö–≤–∞—Ç —Ä–∞–π–æ–Ω–æ–≤, PvP-—Å—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–∫–∞—á–∫–∞ –±–æ–π—Ü–æ–≤, –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ PUNK.\n\n"
        "‚Ä¢ *Punk City* ‚Äî –±–æ—Ç –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON –¥–ª—è PvP —Å NFT-–∞–≤–∞—Ç–∞—Ä–∞–º–∏ –∏ –º–µ—Ö–∞–Ω–∏–∫–æ–π Play-to-Earn."
    )
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üéÆ District Clash", url="https://t.me/districtclash_bot"),
        InlineKeyboardButton("üéÆ Punk City",       url="https://t.me/PunkCity2094bot"),
        InlineKeyboardButton(
            "üîô Back to Services" if lang=="en" else "üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
            callback_data="services"
        )
    )
    bot.send_message(c.message.chat.id, text, reply_markup=kb)


# generic ‚Äúcoming soon‚Äù –¥–ª—è VPN –∏ Dev Zone
for key in ["vpn", "dev_zone"]:
    @bot.callback_query_handler(lambda c, k=key: c.data == k)
    def cb_coming_soon(c, k=key):
        bot.answer_callback_query(c.id)
        bot.delete_message(c.message.chat.id, c.message.message_id)

        uid  = str(c.from_user.id)
        lang = get_lang(uid)
        kb   = InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                "üîô Back to Services" if lang=="en" else "üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º",
                callback_data="services"
            )
        )
        bot.send_message(c.message.chat.id, t(uid, "coming_soon"), reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data == "telegram_services")
def cb_telegram_services(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid     = str(c.from_user.id)
    lang    = get_lang(uid)
    caption = "‚ú® *Telegram Services*" if lang=="en" else "‚ú® *–°–µ—Ä–≤–∏—Å—ã Telegram*"

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(
            "‚≠ê Buy Stars" if lang=="en" else "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã",
            callback_data="buy_stars"
        ),
        InlineKeyboardButton(
            "üéÅ Buy Premium" if lang=="en" else "üéÅ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º",
            callback_data="buy_premium"
        ),
        BTN_CANCEL
    )
    bot.send_message(c.message.chat.id, caption, reply_markup=kb)

# --------------------------------------------------------------------------- #
#                               Transaction History                           #
# --------------------------------------------------------------------------- #
@bot.callback_query_handler(lambda c: c.data=="history")
def cb_history(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    uid = str(c.from_user.id)
    lang = get_lang(uid)
    hist = db.child("users").child(uid).child("history").get().val() or []
    title = "üóí *Transaction History:*" if lang=="en" else "üóí *–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:*"
    body = "\n".join(f"‚Ä¢ {l}" for l in hist) if hist else ("‚Äî no records ‚Äî" if lang=="en" else "‚Äî –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç ‚Äî")
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô Back to Wallet" if lang=="en" else "üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª—ë–∫", callback_data="wallet")
    )
    bot.send_message(c.message.chat.id, f"{title}\n\n{body}", reply_markup=kb)



# --------------------------------------------------------------------------- #
#                               Transaction top up                           #
# --------------------------------------------------------------------------- #
@bot.callback_query_handler(lambda c: c.data == "top_up")
def cb_top_up(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid  = str(c.from_user.id)
    memo = uuid.uuid4().hex

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    text = t(uid, "top_up", address=DEPOSIT_ADDRESS, memo=memo)
    lang = get_lang(uid)
    kb = InlineKeyboardMarkup() \
        .add(
            InlineKeyboardButton(
                "üí∞ Open Wallet" if lang == "en" else "üí∞ –û—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª—ë–∫",
                url=f"ton://transfer/{DEPOSIT_ADDRESS}?text={memo}"
            )
        ) \
        .add(
            InlineKeyboardButton("‚ùå", callback_data="wallet")
        )

    instr_msg = bot.send_message(c.message.chat.id, text, reply_markup=kb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º memo ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + id –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    pending_topup_memos[memo] = {
        "uid":    uid,
        "msg_id": instr_msg.message_id
    }

    # –£–¥–∞–ª–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    threading.Timer(
        1200,
        lambda: bot.delete_message(instr_msg.chat.id, instr_msg.message_id)
    ).start()


# 2) –î–µ–∫–æ–¥–µ—Ä memo
def decode_memo(hex_or_plain: str) -> str:
    try:
        return bytes.fromhex(hex_or_plain).decode("utf-8")
    except Exception:
        return hex_or_plain


# 3) –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–ø—É–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (Top-Up —Å ¬´–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º¬ª polling)
session = requests.Session()
session.params = {
    "address":  DEPOSIT_ADDRESS,
    "limit":    50,
    "archival": "true",
    "api_key":  TON_API_KEY
}

def poll_deposits():
    while True:
        # –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–∂–∏–¥–∞–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π ‚Äî –∂–¥—ë–º –¥–æ–ª—å—à–µ
        if not pending_topup_memos:
            time.sleep(50)
            continue

        try:
            resp = session.get(f"{API_BASE_URL}/api/v2/getTransactions", timeout=10).json()
            if not resp.get("ok"):
                time.sleep(20)
                continue

            for tx in resp["result"]:
                lt   = int(tx["transaction_id"]["lt"])
                memo = decode_memo(tx["in_msg"].get("message",""))

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à memo –∏ –Ω–æ–≤–∞—è lt:
                if memo in pending_topup_memos and lt > last_topup_lts.get(memo, 0):
                    last_topup_lts[memo] = lt
                    entry = pending_topup_memos.pop(memo)
                    uid   = entry["uid"]
                    msg_id = entry.get("msg_id")
                    amount = int(tx["in_msg"]["value"]) / 1e9

                    # —É–¥–∞–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                    if msg_id:
                        try: bot.delete_message(int(uid), msg_id)
                        except: pass

                    # –∑–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    new_bal = fetch_balance(uid) + amount
                    save_balance(uid, new_bal)
                    append_history(uid, f"Deposited {amount:.2f} TON")

                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    lang = get_lang(uid)
                    kb = InlineKeyboardMarkup().add(
                        InlineKeyboardButton(
                            "üîô Back to Wallet" if lang=="en"
                            else "üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª—ë–∫",
                            callback_data="wallet"
                        )
                    )
                    bot.send_message(
                        int(uid),
                        (f"‚úÖ Deposit {amount:.2f} TON confirmed.\n"
                         f"üí≥ New balance: {new_bal:.2f} TON")
                        if lang=="en" else
                        (f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount:.2f} TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n"
                         f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_bal:.2f} TON"),
                        reply_markup=kb
                    )

        except Exception as e:
            logging.error(f"Deposit polling error: {e}")

        # –º–µ–∂–¥—É ¬´–∞–∫—Ç–∏–≤–Ω—ã–º¬ª –æ–ø—Ä–æ—Å–æ–º ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
        time.sleep(5)


# 4) –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (—Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ main)
threading.Thread(target=poll_deposits, daemon=True).start()

# --------------------------------------------------------------------------- #
#                           Price-helper: NFT discount                        #
# --------------------------------------------------------------------------- #
DISCOUNT_PCT = 0.05          # 5 %

def apply_discount(uid: str, price: float) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –æ—Ç–º–µ—Ç–∫–∞ has_nft=True.
    –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3-—Ö –∑–Ω–∞–∫–æ–≤ (—Ç–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å).
    """
    try:
        has_nft = db.child("users").child(uid).child("has_nft").get().val() or False
    except Exception:
        has_nft = False

    return round(price * (1 - DISCOUNT_PCT), 3) if has_nft else price

# ‚îÄ‚îÄ Virtual Number Purchase (USA only, auto-expire after 10 min) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import threading

number_selection = {}  # uid ‚Üí {"service", "activation", "chat_id", "msg_id", "timer"}

def expire_order(uid):
    sel = number_selection.get(uid)
    if not sel or sel.get("expired"):
        return
    act_id = sel.get("activation")
    if not act_id:
        return
    # check for code
    resp = requests.get(
        f'https://5sim.net/v1/user/check/{act_id}',
        headers={'Authorization':f'Bearer {SIM_TOKEN}','Accept':'application/json'}
    ).json()
    code = resp.get("code") or (resp.get("sms","") and resp["sms"][0])
    if code:
        return  # SMS arrived, do nothing
    # cancel at provider side
    requests.get(
        f'https://5sim.net/v1/user/cancel/{act_id}',
        headers={'Authorization':f'Bearer {SIM_TOKEN}','Accept':'application/json'}
    )
    # edit user message to indicate expiry
    chat_id = sel["chat_id"]
    msg_id  = sel["msg_id"]
    lang    = get_lang(uid)
    text = (
        "‚åõ Time expired. Number validity ended."
        if lang=="en"
        else "‚åõ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
    )
    # only "Done" button remains
    done = "‚ùå Done" if lang=="en" else "‚ùå –ì–æ—Ç–æ–≤–æ"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(done, callback_data="services")
    )
    bot.edit_message_text(text, chat_id, msg_id, parse_mode="Markdown", reply_markup=kb)
    sel["expired"] = True
    # clean up
    number_selection.pop(uid, None)


@bot.callback_query_handler(lambda c: c.data == "buy_number")
def cb_buy_number(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    uid, lang = str(c.from_user.id), get_lang(str(c.from_user.id))

    number_selection[uid] = {"chat_id": c.message.chat.id}

    caption = (
        "üìû *Virtual Number (USA)*\n\n"
        "‚Ä¢ Keep your real number private\n"
        "‚Ä¢ Receive SMS codes securely\n"
        "‚Ä¢ Use it to register a Telegram account‚Äîit‚Äôs yours forever."
        if lang=="en"
        else
        "üìû *–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (USA)*\n\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ç–∞–π–Ω–µ\n"
        "‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ SMS-–∫–æ–¥—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ\n"
        "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–∞ –Ω—ë–º Telegram-–∞–∫–∫–∞—É–Ω—Ç ‚Äî –æ–Ω –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–∞—à–∏–º –Ω–∞–≤—Å–µ–≥–¥–∞."
    )
    buy = "üì± Buy Number" if lang=="en" else "üì± –ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä"
    cancel = "üõë Cancel"   if lang=="en" else "üõë –û—Ç–º–µ–Ω–∞"

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(buy,    callback_data="buy_number_confirm"),
        InlineKeyboardButton(cancel, callback_data="services")
    )
    msg = bot.send_message(c.message.chat.id, caption,
                           parse_mode="Markdown", reply_markup=kb)
    number_selection[uid]["msg_id"] = msg.message_id


@bot.callback_query_handler(lambda c: c.data == "buy_number_confirm")
def cb_buy_number_confirm(c):
    bot.answer_callback_query(c.id)
    uid, lang = str(c.from_user.id), get_lang(str(c.from_user.id))
    price = apply_discount(uid, 0.999)

    prompt = (
        f"Select a service (USA) ‚Äî {price:.3f} TON per number:"
        if lang=="en"
        else
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å (USA) ‚Äî {price:.3f} TON –∑–∞ –Ω–æ–º–µ—Ä:"
    )
    kb = InlineKeyboardMarkup(row_width=3)
    for svc in NUMBER_SERVICES:
        kb.add(InlineKeyboardButton(svc.title(), callback_data=f"svc:{svc}"))
    kb.add(InlineKeyboardButton("üõë Cancel" if lang=="en" else "üõë –û—Ç–º–µ–Ω–∞",
                                callback_data="services"))

    bot.edit_message_text(prompt,
                          c.message.chat.id,
                          number_selection[uid]["msg_id"],
                          parse_mode="Markdown", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data.startswith("svc:"))
def cb_choose_service(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    svc = c.data.split(":",1)[1]
    number_selection[uid]["service"] = svc
    lang = get_lang(uid)
    price = apply_discount(uid, 0.999)

    text = (
        f"‚úÖ Confirm purchase of *{svc.title()}* number for *{price:.3f} TON*?\n\n"
        "_Valid for 10 minutes._"
        if lang=="en"
        else
        f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É *{svc.title()}* –Ω–æ–º–µ—Ä–∞ –∑–∞ *{price:.3f} TON*?\n\n"
        "_–ù–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç._"
    )
    yes = "‚úÖ Yes" if lang=="en" else "‚úÖ –î–∞"
    no  = "üõë Cancel" if lang=="en" else "üõë –û—Ç–º–µ–Ω–∞"

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(yes, callback_data="confirm_buy"),
        InlineKeyboardButton(no,  callback_data="services")
    )

    bot.edit_message_text(text,
                          number_selection[uid]["chat_id"],
                          number_selection[uid]["msg_id"],
                          parse_mode="Markdown", reply_markup=kb)


@bot.callback_query_handler(lambda c: c.data == "confirm_buy")
def cb_confirm_buy(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = number_selection.get(uid, {})
    svc = sel.get("service")
    lang = get_lang(uid)
    bal  = fetch_balance(uid)
    price = apply_discount(uid, 0.999)

    if bal < price:
        return bot.send_message(sel["chat_id"], t(uid, "no_balance"))

    # request number
    resp = requests.get(
        f'https://5sim.net/v1/user/buy/activation/usa/any/{svc}',
        headers={'Authorization':f'Bearer {SIM_TOKEN}','Accept':'application/json'}
    ).json()
    phone = resp.get("phone")
    act_id= resp.get("id")

    if not phone:
        # no numbers available
        msg = ("No numbers available, try later." if lang=="en"
               else "–ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        bot.send_message(sel["chat_id"], msg)
        return cb_buy_number(c)  # go back to menu

    # deduct user balance
    save_balance(uid, bal - price)
    append_history(uid, f"Bought {svc} number {phone}")
    sel["activation"] = act_id

    # send final message
    text = (
        f"‚úÖ Your number: `{phone}`\n\n"
        "Refresh for SMS code or exit."
        if lang=="en"
        else
        f"‚úÖ –í–∞—à –Ω–æ–º–µ—Ä: `{phone}`\n\n"
        "–û–±–Ω–æ–≤–∏—Ç–µ –¥–ª—è –∫–æ–¥–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥."
    )
    refresh = "üîÑ Refresh Code" if lang=="en" else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥"
    done    = "‚ùå Done"           if lang=="en" else "‚ùå –ì–æ—Ç–æ–≤–æ"

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(refresh, callback_data="get_code"),
        InlineKeyboardButton(done,    callback_data="services")
    )

    m = bot.send_message(sel["chat_id"], text, parse_mode="Markdown", reply_markup=kb)
    sel["msg_id"] = m.message_id

    # schedule automatic expiry after 10 minutes
    timer = threading.Timer(600, lambda uid=uid: expire_order(uid))
    sel["timer"] = timer
    timer.start()


@bot.callback_query_handler(lambda c: c.data == "get_code")
def cb_get_code(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = number_selection.get(uid, {})
    act_id = sel.get("activation")
    lang = get_lang(uid)
    if not act_id or sel.get("expired"):
        return bot.send_message(c.message.chat.id,
            "Order expired." if lang=="en" else "–°—Ä–æ–∫ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç—ë–∫.")
    resp = requests.get(
        f'https://5sim.net/v1/user/check/{act_id}',
        headers={'Authorization':f'Bearer {SIM_TOKEN}','Accept':'application/json'}
    ).json()
    code = resp.get("code") or (resp.get("sms","") and resp["sms"][0])
    if not code:
        msg = ("No code yet. Try again later." if lang=="en"
               else "–ö–æ–¥ –µ—â—ë –Ω–µ –ø—Ä–∏—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        msg = f"üî¢ SMS Code: *{code}*"
    # same vertical buttons
    refresh = "üîÑ Refresh Code" if lang=="en" else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥"
    done    = "‚ùå Done"           if lang=="en" else "‚ùå –ì–æ—Ç–æ–≤–æ"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton(refresh, callback_data="get_code"),
        InlineKeyboardButton(done,    callback_data="services")
    )
    bot.send_message(c.message.chat.id, msg, parse_mode="Markdown", reply_markup=kb)


# ‚îÄ‚îÄ BUY TELEGRAM STARS (Revised) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

STAR_IMG_URL = "https://raw.githubusercontent.com/qnexst/404token/main/star.jpg"

@bot.callback_query_handler(lambda c: c.data == "buy_stars")
def cb_buy_stars(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid = str(c.from_user.id)
    star_selection[uid] = {
        "qty":       TARIFFS[0],
        "recipient": get_username(c.from_user),
        "chat_id":   c.message.chat.id,
        "msg_id":    None
    }
    show_star_menu(uid, force_new=True)


def show_star_menu(uid, *, force_new=False):
    """Draw or update the Stars purchase menu as a photo with inline buttons."""
    sel = star_selection.get(uid)
    if not sel:
        return

    chat_id = sel["chat_id"]
    msg_id  = sel.get("msg_id")
    qty      = sel["qty"]
    rec      = sel["recipient"]
    price    = apply_discount(uid, STAR_PRICES[qty])
    lang     = get_lang(uid)

    # build caption without balance text
    if lang == "en":
        caption = (
            f"üí´ *Purchase Telegram Stars*\n\n"
            f"Recipient: <b>@{rec}</b>\n"
            f"Quantity: <b>{qty}</b> ‚Üí <b>{price:.3f} TON</b>"
        )
    else:
        caption = (
            f"üí´ *–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥ Telegram*\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>@{rec}</b>\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b> ‚Üí <b>{price:.3f} TON</b>"
        )

    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚ûñ", callback_data="stars_minus"),
        InlineKeyboardButton("üí∞ Buy", callback_data="stars_continue"),
        InlineKeyboardButton("‚ûï", callback_data="stars_plus")
    )
    kb.add(
        InlineKeyboardButton("üîÑ Change Recipient", callback_data="stars_change"),
        InlineKeyboardButton("üõë Cancel",            callback_data="telegram_services")
    )
    kb.add(
        InlineKeyboardButton("üí≥ My Balance", callback_data="star_balance")
    )

    # if existing message, edit caption; else send new photo
    if msg_id and not force_new:
        try:
            bot.edit_message_caption(
                caption=caption,
                chat_id=chat_id,
                message_id=msg_id,
                parse_mode="HTML",
                reply_markup=kb
            )
            return
        except Exception:
            pass

    # delete old menu if present
    if msg_id:
        try: bot.delete_message(chat_id, msg_id)
        except: pass

    m = bot.send_photo(
        chat_id,
        STAR_IMG_URL,
        caption=caption,
        parse_mode="HTML",
        reply_markup=kb
    )
    sel["msg_id"] = m.message_id


@bot.callback_query_handler(lambda c: c.data in ["stars_minus", "stars_plus"])
def cb_stars_adjust(c):
    uid = str(c.from_user.id)
    sel = star_selection.get(uid)
    if not sel:
        return bot.answer_callback_query(c.id)

    idx = TARIFFS.index(sel["qty"])
    lang = get_lang(uid)

    if c.data == "stars_minus":
        if idx == 0:
            return bot.answer_callback_query(
                c.id,
                text="–ú–∏–Ω–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç" if lang=="ru" else "Minimum reached",
                show_alert=True
            )
        idx -= 1

    if c.data == "stars_plus":
        if idx == len(TARIFFS) - 1:
            return bot.answer_callback_query(
                c.id,
                text="–ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç" if lang=="ru" else "Maximum reached",
                show_alert=True
            )
        idx += 1

    sel["qty"] = TARIFFS[idx]
    show_star_menu(uid)


@bot.callback_query_handler(lambda c: c.data == "stars_change")
def cb_stars_change(c):
    bot.answer_callback_query(c.id)
    uid, lang = str(c.from_user.id), get_lang(str(c.from_user.id))
    prompt = "Enter @username:" if lang=="en" else "–í–≤–µ–¥–∏—Ç–µ @username:"
    m = bot.send_message(uid, prompt, reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùå Cancel", callback_data="telegram_services")
    ))
    bot.register_next_step_handler(m, process_star_username)


def process_star_username(msg):
    uid = str(msg.from_user.id)
    sel = star_selection.get(uid)
    if not sel:
        return
    new_u = msg.text.strip().lstrip("@")
    lang  = get_lang(uid)
    if not new_u:
        retry = "Invalid username, try again:" if lang=="en" else "–ù–µ–≤–µ—Ä–Ω—ã–π username, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        m = bot.send_message(uid, retry)
        bot.register_next_step_handler(m, process_star_username)
        return
    sel["recipient"] = new_u
    show_star_menu(uid, force_new=True)


@bot.callback_query_handler(lambda c: c.data == "stars_continue")
def cb_stars_continue(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = star_selection.get(uid)
    if not sel:
        return

    qty   = sel["qty"]
    price = apply_discount(uid, STAR_PRICES[qty])
    lang  = get_lang(uid)
    label = f"{qty} Stars"
    if lang == "en":
        caption = f"‚úÖ Confirm purchase of *{label}* for *{price:.3f} TON*?"
    else:
        caption = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É *{label}* –∑–∞ *{price:.3f} TON*?"

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ Yes", callback_data="stars_confirm"),
        InlineKeyboardButton("‚ùå No",  callback_data="telegram_services")
    )

    bot.edit_message_caption(
        caption=caption,
        chat_id=sel["chat_id"],
        message_id=sel["msg_id"],
        parse_mode="Markdown",
        reply_markup=kb
    )


@bot.callback_query_handler(lambda c: c.data == "stars_confirm")
def cb_stars_confirm(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = star_selection.pop(uid, None)
    if not sel:
        return

    qty   = sel["qty"]
    price = apply_discount(uid, STAR_PRICES[qty])
    bal   = fetch_balance(uid)
    if bal < price:
        return bot.send_message(sel["chat_id"], t(uid, "no_balance"))

    save_balance(uid, bal - price)
    append_history(uid, f"Ordered {qty} Stars for @{sel['recipient']}")

    order_id = uuid.uuid4().hex
    db.child("orders").child(order_id).set({
        "user_uid":  uid,
        "recipient": sel["recipient"],
        "qty":       qty,
        "status":    "pending",
        "type":      "stars"
    })

    link = f"https://fragment.com/stars/buy?quantity={qty}"
    for adm_uid, data in (db.child("users").get().val() or {}).items():
        if data.get("is_admin"):
            adm_text = (
                f"üÜï New Stars Order:\n"
                f"‚Ä¢ User: @{sel['recipient']}\n"
                f"‚Ä¢ Qty: {qty}\n"
                f"‚Ä¢ Link: {link}\n"
                f"‚Ä¢ Order ID: <code>{order_id}</code>\n"
                f"‚Ä¢ Status: pending"
            )
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ Mark as Sent", callback_data=f"stars_sent:{order_id}")
            )
            bot.send_message(adm_uid, adm_text, parse_mode="HTML", reply_markup=kb)

    done = "‚úÖ Order placed." if get_lang(uid)=="en" else "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω."
    bot.send_message(sel["chat_id"], done)


@bot.callback_query_handler(lambda c: c.data == "star_balance")
def cb_star_balance(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    bal = fetch_balance(uid)
    text = f"üí≥ Your balance: <b>{bal:.3f} TON</b>" if get_lang(uid)=="en" else f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal:.3f} TON</b>"
    bot.send_message(c.message.chat.id, text, parse_mode="HTML")


@bot.callback_query_handler(lambda c: c.data.startswith("stars_sent:"))
def cb_stars_sent(c):
    bot.answer_callback_query(c.id)
    order_id = c.data.split(":",1)[1]
    order = db.child("orders").child(order_id).get().val() or {}
    if not order:
        return bot.send_message(c.message.chat.id, "‚ùå Order not found.")
    db.child("orders").child(order_id).update({"status":"sent"})

    user_uid  = order["user_uid"]
    qty       = order["qty"]
    recipient = order["recipient"]
    lang_u    = get_lang(user_uid)

    # notify user in their language
    msg = (
        f"‚úÖ Your {qty} Stars for @{recipient} have been sent!"
        if lang_u=="en"
        else f"‚úÖ –í–∞—à–∏ {qty} –∑–≤—ë–∑–¥ –¥–ª—è @{recipient} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!"
    )
    bot.send_message(user_uid, msg)
    append_history(user_uid, f"Stars order {order_id} marked sent by admin")

    # update admin message
    new_text = f"‚úÖ Order {order_id} marked as sent."
    bot.edit_message_text(new_text, c.message.chat.id, c.message.message_id)

# ‚îÄ‚îÄ BUY TELEGRAM PREMIUM (Improved) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@bot.callback_query_handler(lambda c: c.data == "buy_premium")
def cb_buy_premium(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)

    uid = str(c.from_user.id)
    premium_selection[uid] = {
        "months":    PREMIUM_MONTHS[0],
        "recipient": get_username(c.from_user),
        "chat_id":   c.message.chat.id,
        "msg_id":    None
    }
    show_premium_menu(uid, force_new=True)


def show_premium_menu(uid, *, force_new=False):
    """Render or update the Premium purchase menu with extra features."""
    sel = premium_selection.get(uid)
    if not sel:
        return

    chat_id = sel["chat_id"]
    msg_id  = sel.get("msg_id")
    months  = sel["months"]
    rec     = sel["recipient"]
    orig    = PREMIUM_PRICES[months]
    price   = apply_discount(uid, orig)
    has_nft = db.child("users").child(uid).child("has_nft").get().val() or False
    lang    = get_lang(uid)

    # Header: NFT discount indicator
    header = "üéâ NFT discount applied!\n" if has_nft else ""

    if lang == "en":
        title   = "üîí *Buy Telegram Premium*"
        rec_txt = f"Recipient: <b>@{rec}</b>"
        dur_txt = f"Duration: <b>{months} month{'s' if months>1 else ''}</b> ‚Üí <b>{price:.3f} TON</b>"
    else:
        title   = "üîí *–ü–æ–∫—É–ø–∫–∞ Telegram Premium*"
        rec_txt = f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <b>@{rec}</b>"
        dur_txt = f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{months} –º–µ—Å.</b> ‚Üí <b>{price:.3f} TON</b>"

    text = f"{header}{title}\n\n{rec_txt}\n{dur_txt}"

    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚ûñ", callback_data="prem_minus"),
        InlineKeyboardButton("üí∞ Buy", callback_data="prem_continue"),
        InlineKeyboardButton("‚ûï", callback_data="prem_plus")
    )
    kb.add(
        InlineKeyboardButton("üîÑ Change Recipient", callback_data="prem_change"),
        InlineKeyboardButton("üõë Cancel",             callback_data="telegram_services")
    )
    kb.add(
        InlineKeyboardButton("üí≥ My Balance", callback_data="premium_balance")
    )

    if msg_id and not force_new:
        try:
            bot.edit_message_text(
                text, chat_id, msg_id,
                parse_mode="HTML", reply_markup=kb
            )
            return
        except:
            pass

    if msg_id:
        try: bot.delete_message(chat_id, msg_id)
        except: pass

    m = bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=kb)
    sel["msg_id"] = m.message_id


@bot.callback_query_handler(lambda c: c.data in ["prem_minus", "prem_plus"])
def cb_prem_adjust(c):
    uid = str(c.from_user.id)
    sel = premium_selection.get(uid)
    if not sel:
        return bot.answer_callback_query(c.id)

    idx  = PREMIUM_MONTHS.index(sel["months"])
    lang = get_lang(uid)

    if c.data == "prem_minus":
        if idx == 0:
            return bot.answer_callback_query(
                c.id,
                text="–ú–∏–Ω–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç" if lang=="ru" else "Minimum reached",
                show_alert=True
            )
        idx -= 1

    if c.data == "prem_plus":
        if idx == len(PREMIUM_MONTHS) - 1:
            return bot.answer_callback_query(
                c.id,
                text="–ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç" if lang=="ru" else "Maximum reached",
                show_alert=True
            )
        idx += 1

    sel["months"] = PREMIUM_MONTHS[idx]
    show_premium_menu(uid)


@bot.callback_query_handler(lambda c: c.data == "prem_change")
def cb_prem_change(c):
    bot.answer_callback_query(c.id)
    uid, lang = str(c.from_user.id), get_lang(str(c.from_user.id))
    prompt = "Enter @username:" if lang=="en" else "–í–≤–µ–¥–∏—Ç–µ @username:"
    m = bot.send_message(uid, prompt, reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùå Cancel", callback_data="telegram_services")
    ))
    bot.register_next_step_handler(m, process_prem_username)


def process_prem_username(msg):
    uid = str(msg.from_user.id)
    sel = premium_selection.get(uid)
    if not sel:
        return

    new_u = msg.text.strip().lstrip("@")
    lang  = get_lang(uid)
    if not new_u:
        retry = "Invalid username, try again:" if lang=="en" else "–ù–µ–≤–µ—Ä–Ω—ã–π username, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        m = bot.send_message(uid, retry)
        bot.register_next_step_handler(m, process_prem_username)
        return

    sel["recipient"] = new_u
    show_premium_menu(uid, force_new=True)


@bot.callback_query_handler(lambda c: c.data == "prem_continue")
def cb_prem_continue(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = premium_selection.get(uid)
    if not sel:
        return

    months = sel["months"]
    base   = PREMIUM_PRICES[months]
    price  = apply_discount(uid, base)
    lang   = get_lang(uid)
    label  = f"{months} month{'s' if months>1 else ''}" if lang=="en" else f"{months} –º–µ—Å."
    if lang == "en":
        text = f"‚úÖ Confirm purchase of *{label} Premium* for *{price:.3f} TON*?"
    else:
        text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É Premium *{label}* –∑–∞ *{price:.3f} TON*?"

    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ Yes", callback_data="prem_confirm"),
        InlineKeyboardButton("‚ùå No",  callback_data="telegram_services")
    )

    bot.edit_message_text(
        text, sel["chat_id"], sel["msg_id"],
        parse_mode="Markdown", reply_markup=kb
    )


@bot.callback_query_handler(lambda c: c.data == "prem_confirm")
def cb_prem_confirm(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    sel = premium_selection.pop(uid, None)
    if not sel:
        return

    months = sel["months"]
    base   = PREMIUM_PRICES[months]
    price  = apply_discount(uid, base)
    bal    = fetch_balance(uid)
    lang   = get_lang(uid)

    if bal < price:
        return bot.send_message(sel["chat_id"], t(uid, "no_balance"))

    save_balance(uid, bal - price)
    append_history(uid, f"Ordered Premium {months}m for @{sel['recipient']}")

    order_id = uuid.uuid4().hex
    db.child("orders").child(order_id).set({
        "user_uid":  uid,
        "recipient": sel["recipient"],
        "months":    months,
        "status":    "pending",
        "type":      "premium"
    })

    # notify admins
    link = f"https://fragment.com/premium/gift?months={months}"
    for adm_uid, data in (db.child("users").get().val() or {}).items():
        if data.get("is_admin"):
            adm_text = (
                f"üÜï New Premium Order:\n"
                f"‚Ä¢ User: @{sel['recipient']}\n"
                f"‚Ä¢ Months: {months}\n"
                f"‚Ä¢ Link: {link}\n"
                f"‚Ä¢ Order ID: <code>{order_id}</code>\n"
                f"‚Ä¢ Status: pending"
            )
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ Mark as Sent", callback_data=f"prem_sent:{order_id}")
            )
            bot.send_message(adm_uid, adm_text, parse_mode="HTML", reply_markup=kb)

    done = "‚úÖ Order placed." if lang=="en" else "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω."
    bot.send_message(sel["chat_id"], done)


@bot.callback_query_handler(lambda c: c.data == "premium_balance")
def cb_premium_balance(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    bal = fetch_balance(uid)
    text = f"üí≥ Your balance: <b>{bal:.3f} TON</b>" if get_lang(uid)=="en" else f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal:.3f} TON</b>"
    bot.send_message(c.message.chat.id, text, parse_mode="HTML")


@bot.callback_query_handler(lambda c: c.data.startswith("prem_sent:"))
def cb_prem_sent(c):
    bot.answer_callback_query(c.id)
    order_id = c.data.split(":",1)[1]
    order = db.child("orders").child(order_id).get().val() or {}
    if not order:
        return bot.send_message(c.message.chat.id, "‚ùå Order not found.")
    db.child("orders").child(order_id).update({"status":"sent"})

    user_uid  = order["user_uid"]
    months    = order["months"]
    recipient = order["recipient"]
    lang_u    = get_lang(user_uid)

    # notify user
    msg = (
        f"‚úÖ Your {months} month{'s' if months>1 else ''} Premium for @{recipient} has been activated!"
        if lang_u=="en"
        else f"‚úÖ –í–∞—à Premium –Ω–∞ {months} –º–µ—Å. –¥–ª—è @{recipient} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    )
    bot.send_message(user_uid, msg)
    append_history(user_uid, f"Premium order {order_id} marked sent by admin")

    # update admin message
    bot.edit_message_text(
        f"‚úÖ Order {order_id} marked as sent.",
        c.message.chat.id, c.message.message_id
    )


# === AI Integration Section (With NFT Discount & Full ‚Äúmonth‚Äù Labels) ===

import html
import threading
import time
import logging
import requests
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ‚îÄ‚îÄ‚îÄ Configuration ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AI21_API_KEY        = ""
AI21_MODEL          = "jamba-large"   # or "jamba-mini"
FREE_TRIAL_REQUESTS = 3               # free chat requests per user
AI_PLANS = {
    1: 0.5,    # 1 month
    3: 1.0,    # 3 months
    12: 3.50   # 12 months
}

# ‚îÄ‚îÄ‚îÄ In-memory store ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ai_sessions = set()

# ‚îÄ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _now() -> float:
    return time.time()

def _paid_until(uid: str) -> float:
    return db.child("users").child(uid).child("ai_exp").get().val() or 0.0

def _free_used(uid: str) -> int:
    return db.child("users").child(uid).child("free_ai_used").get().val() or 0

def remaining_free(uid: str) -> int:
    return max(0, FREE_TRIAL_REQUESTS - _free_used(uid))

def can_use_ai(uid: str) -> bool:
    return _now() < _paid_until(uid) or _free_used(uid) < FREE_TRIAL_REQUESTS

def _inc_free(uid: str):
    new_count = _free_used(uid) + 1
    db.child("users").child(uid).update({"free_ai_used": new_count})
    append_history(uid, f"AI free trial used ({new_count}/{FREE_TRIAL_REQUESTS})")

def grant_ai(uid: str, months: int):
    base   = max(_now(), _paid_until(uid))
    expiry = base + months * 30 * 24 * 3600
    db.child("users").child(uid).update({
        "ai_exp": expiry,
        "free_ai_used": 0
    })
    append_history(uid, f"Purchased AI plan: {months} month{'s' if months>1 else ''}")

def _keep_typing(bot, chat_id, stop_evt):
    while not stop_evt.is_set():
        try: bot.send_chat_action(chat_id, "typing")
        except: pass
        time.sleep(4)

def _ai21_chat(prompt: str) -> str:
    url = "https://api.ai21.com/studio/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {AI21_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": AI21_MODEL,
        "messages": [
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user",   "content": prompt}
        ],
        "temperature": 0.7,
        "maxTokens": 300
    }
    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=20).json()
        if "error" in resp:
            logging.error(f"AI21 error: {resp['error']}")
            return f"‚ö†Ô∏è API error: {resp['error'].get('message','Unknown')}"
        if "choices" not in resp:
            logging.error(f"Unexpected AI21 response: {resp}")
            return "‚ö†Ô∏è Unexpected response from AI21."
        return resp["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.error(f"AI21 failed: {e}")
        return "‚ö†Ô∏è Sorry, I can‚Äôt answer right now."

def _chunks(txt: str, n: int = 4000):
    for i in range(0, len(txt), n):
        yield txt[i:i+n]

# ‚îÄ‚îÄ‚îÄ UI & Handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def show_ai_center(chat_id: int, uid: str):
    lang = get_lang(uid)
    paid_expiry = _paid_until(uid)
    if _now() < paid_expiry:
        expiry_str = time.strftime("%Y-%m-%d", time.localtime(paid_expiry))
        status = f"üóì Plan active until <b>{expiry_str}</b>."
    else:
        rem = remaining_free(uid)
        status = (f"üéÅ Free requests left: <b>{rem}</b>/{FREE_TRIAL_REQUESTS}."
                  if rem>0 else "üö´ Free trial ended.")
    text = f"ü§ñ AI Center\n\n{status}" if lang=="en" else f"ü§ñ –¶–µ–Ω—Ç—Ä –ò–ò\n\n{status}"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üí¨ Chat with AI", callback_data="ai_chat"),
        InlineKeyboardButton("üñº Generate Image", callback_data="ai_image")
    )
    kb.add(
        InlineKeyboardButton("üéô Voice AI",      callback_data="ai_voice"),
        InlineKeyboardButton("üì¶ Plans & Pricing", callback_data="ai_plans")
    )
    back_label = "üîô Back to Services" if lang=="en" else "üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–∏—Å–∞–º"
    kb.add(InlineKeyboardButton(back_label, callback_data="services"))
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=kb)

@bot.message_handler(commands=["ai","AI"])
def cmd_ai(msg):
    uid = str(msg.from_user.id)
    show_ai_center(msg.chat.id, uid)

@bot.callback_query_handler(lambda c: c.data=="ai")
def cb_ai(c):
    bot.answer_callback_query(c.id)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    show_ai_center(c.message.chat.id, str(c.from_user.id))

@bot.callback_query_handler(lambda c: c.data in ["ai_image","ai_voice"])
def cb_ai_soon(c):
    bot.answer_callback_query(c.id)
    lang = get_lang(str(c.from_user.id))
    text = "üöß Coming soon!" if lang=="en" else "üöß –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!"
    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô Back", callback_data="ai")
    )
    bot.send_message(c.message.chat.id, text, reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data=="ai_plans")
def cb_ai_plans(c):
    bot.answer_callback_query(c.id)
    uid     = str(c.from_user.id)
    chat_id = c.message.chat.id
    lang    = get_lang(uid)
    text    = "üöÄ Available AI plans:" if lang=="en" else "üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ò–ò:"
    kb = InlineKeyboardMarkup(row_width=1)
    for months, base_price in AI_PLANS.items():
        label = f"{months} month" if months==1 else f"{months} months"
        price = apply_discount(uid, base_price)
        kb.add(InlineKeyboardButton(f"{label} ‚Äî {price:.2f} TON", callback_data=f"ai_buy:{months}"))
    back_label = "‚¨ÖÔ∏è Back" if lang=="en" else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    kb.add(InlineKeyboardButton(back_label, callback_data="ai"))
    bot.edit_message_text(text, chat_id, c.message.message_id,
                          parse_mode="HTML", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data.startswith("ai_buy:"))
def cb_ai_buy(c):
    bot.answer_callback_query(c.id)
    uid     = str(c.from_user.id)
    chat_id = c.message.chat.id
    months  = int(c.data.split(":",1)[1])
    base    = AI_PLANS[months]
    price   = apply_discount(uid, base)
    label   = f"{months} month" if months==1 else f"{months} months"
    text    = f"‚úÖ Confirm purchase of <b>{label}</b> for <b>{price:.2f} TON</b>?"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ Yes", callback_data=f"ai_confirm:{months}"),
        InlineKeyboardButton("‚ùå Cancel", callback_data="ai_plans")
    )
    bot.edit_message_text(text, chat_id, c.message.message_id,
                          parse_mode="HTML", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data.startswith("ai_confirm:"))
def cb_ai_confirm(c):
    bot.answer_callback_query(c.id)
    uid     = str(c.from_user.id)
    chat_id = c.message.chat.id
    months  = int(c.data.split(":",1)[1])
    base    = AI_PLANS[months]
    price   = apply_discount(uid, base)
    bal     = fetch_balance(uid)
    if bal < price:
        return bot.send_message(chat_id, t(uid,"no_balance"))
    save_balance(uid, bal - price)
    grant_ai(uid, months)
    lang = get_lang(uid)
    msg = "‚úÖ AI plan activated!" if lang=="en" else "‚úÖ AI-–ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
    bot.send_message(chat_id, msg)
    show_ai_center(chat_id, uid)

@bot.callback_query_handler(lambda c: c.data=="ai_chat")
def cb_ai_chat(c):
    bot.answer_callback_query(c.id)
    uid     = str(c.from_user.id)
    chat_id = c.message.chat.id
    if not can_use_ai(uid):
        lang = get_lang(uid)
        kb   = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¶ Plans & Pricing", callback_data="ai_plans")
        )
        return bot.send_message(chat_id,
            "üö´ Free trial ended. Please buy a plan." if lang=="en"
            else "üö´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ö—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=kb
        )
    ai_sessions.add(uid)
    prompt = "ü§ñ Ask me anything:" if get_lang(uid)=="en" else "ü§ñ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:"
    kb     = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîö Finish chat", callback_data="end_ai")
    )
    bot.send_message(chat_id, prompt, reply_markup=kb)

@bot.message_handler(func=lambda m: str(m.from_user.id) in ai_sessions)
def _ai_dialog(msg):
    uid     = str(msg.from_user.id)
    chat_id = msg.chat.id
    if not can_use_ai(uid):
        ai_sessions.discard(uid)
        lang = get_lang(uid)
        kb   = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì¶ Plans & Pricing", callback_data="ai_plans")
        )
        return bot.send_message(chat_id,
            "üö´ Free trial ended. Please buy a plan." if lang=="en"
            else "üö´ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç—Ä–∏–∞–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ö—É–ø–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=kb
        )
    stop_evt = threading.Event()
    threading.Thread(target=_keep_typing, args=(bot, chat_id, stop_evt), daemon=True).start()
    answer = _ai21_chat(msg.text)
    stop_evt.set()
    if _now() >= _paid_until(uid):
        _inc_free(uid)
    finish_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîö Finish chat", callback_data="end_ai")
    )
    for chunk in _chunks(f"<pre>{html.escape(answer)}</pre>"):
        bot.send_message(chat_id, chunk,
                         parse_mode="HTML",
                         disable_web_page_preview=True,
                         reply_markup=finish_kb)

@bot.callback_query_handler(lambda c: c.data=="end_ai")
def cb_end_ai(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    ai_sessions.discard(uid)
    bot.delete_message(c.message.chat.id, c.message.message_id)
    show_ai_center(c.message.chat.id, uid)

# --------------------------------------------------------------------------- #
#                            Referrals Screen                                 #
# --------------------------------------------------------------------------- #
@bot.callback_query_handler(lambda c: c.data == "referrals")
def cb_referrals(c):
    logging.info(f"[Referrals] User {c.from_user.id} pressed referrals")
    try:
        bot.answer_callback_query(c.id)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        bot.delete_message(c.message.chat.id, c.message.message_id)

        uid     = str(c.from_user.id)
        lang    = get_lang(uid)
        cnt     = db.child("users").child(uid).child("referrals_count").get().val() or 0
        earned  = db.child("users").child(uid).child("referrals_earned").get().val() or 0.0
        link    = f"https://t.me/{BOT_USERNAME}?start={uid}"

        if lang == "en":
            text = (
                "üë• <b>Your Referrals</b>\n\n"
                "Referral bonus: 0.02 TON when a referral spends ‚â• 1 TON.\n\n"
                f"You‚Äôve invited <b>{cnt}</b> users.\n"
                f"Total earned: <b>{earned:.2f} TON</b>.\n\n"
                "Share your link:\n"
                f"<code>{link}</code>"
            )
            back_label = "üîô Back"
        else:
            text = (
                "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
                "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: 0.02 TON, –∫–æ–≥–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª —Ç—Ä–∞—Ç–∏—Ç ‚â• 1 TON.\n\n"
                f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <b>{cnt}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                f"–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{earned:.2f} TON</b>.\n\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π:\n"
                f"<code>{link}</code>"
            )
            back_label = "‚ùå –ù–∞–∑–∞–¥"

        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(back_label, callback_data="start_over")
        )

        bot.send_message(
            c.message.chat.id,
            text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=kb
        )

    except Exception as e:
        logging.error(f"[Referrals] Error in cb_referrals: {e}")
        bot.send_message(c.message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.")
# --------------------------------------------------------------------------- #
#                                  commands                               #
# --------------------------------------------------------------------------- #
from telebot.types import BotCommand, InlineKeyboardMarkup, InlineKeyboardButton

# --- –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é —Ä—è–¥–æ–º —Å –≤–≤–æ–¥–æ–º ---
bot.set_my_commands([
    BotCommand("/start",   "Start the bot"),
    BotCommand("/info",    "Show bot info"),
    BotCommand("/ai",      "Start AI session"),
    BotCommand("/buystars","Buy Stars & Premium"),
    BotCommand("/discount","NFT discount instructions"),
    BotCommand("/hosting","Host your static websites"),
])

# --- /info –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ ---
@bot.message_handler(commands=["info"])
def cmd_info(msg):
    uid = str(msg.from_user.id)
    lang = get_lang(uid)  # "en" –∏–ª–∏ "ru"
    
    if lang == "ru":
         info_text = (
    "ü§ñ *Arion_Dbot ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫*\n\n"
    "üîπ *–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞* ‚Äî –±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è Telegram –∏ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n\n"
    "üîπ */buystars* ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram Stars –∏ –ø–æ–¥–∞—Ä–∫–æ–≤ Premium –∑–∞ TON\n\n"
    "üîπ *–ö–æ—à–µ–ª—ë–∫* ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º TON: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –∏—Å—Ç–æ—Ä–∏—è –∏ –æ–ø–ª–∞—Ç–∞\n\n"
    "üîπ *–†–µ—Ñ–µ—Ä–∞–ª—ã* ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ 0.02 TON –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\n"
    "üîπ */ai* ‚Äî —É–º–Ω—ã–π AI-—á–∞—Ç: –æ—Ç–≤–µ—Ç—ã, –ø–æ–º–æ—â—å, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞\n\n"
    "üîπ */hosting* ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∞–π—Ç–æ–≤ –≤ .zip –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ—Å—Ç–∏–Ω–≥ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n\n"
    "üîπ */discount* ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ NFT –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è 5% —Å–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –ø–æ–∫—É–ø–∫–∏\n\n"
    "üí° –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
)

    else:
       info_text = (
    "ü§ñ *Arion_Dbot ‚Äî all-in-one assistant*\n\n"
    "üîπ *Virtual Numbers* ‚Äî instantly get numbers for Telegram & other services\n\n"
    "üîπ */buystars* ‚Äî send Telegram Stars and gift Premium with TON\n\n"
    "üîπ *Wallet* ‚Äî manage TON balance: top up, view history, and pay\n\n"
    "üîπ *Referrals* ‚Äî earn 0.02 TON for each active invite\n\n"
    "üîπ */ai* ‚Äî smart AI chat: answers, help, and text generation\n\n"
    "üîπ */hosting* ‚Äî upload zipped websites and auto-host on the internet \n\n"
    "üîπ */discount* ‚Äî verify NFT ownership to activate a 5% discount\n\n"
    "üí° All features are in the menu. Tap /start to begin."
)

    bot.send_message(msg.chat.id, info_text, parse_mode="Markdown")


# --- /buystars —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é Telegram Services ‚Üí Buy Stars / Buy Premium ---
@bot.message_handler(commands=["buystars"])
def cmd_buystars(msg):
    uid  = str(msg.from_user.id)
    lang = get_lang(uid)
    title = "‚ú® *Telegram Services*" if lang=="en" else "‚ú® *–°–µ—Ä–≤–∏—Å—ã Telegram*"
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚≠ê Buy Stars"   if lang=="en" else "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã",   callback_data="buy_stars"),
        InlineKeyboardButton("üéÅ Buy Premium" if lang=="en" else "üéÅ –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data="buy_premium"),
        BTN_CANCEL
    )
    bot.send_message(msg.chat.id, title, reply_markup=kb)


# ‚îÄ‚îÄ‚îÄ NFT Verification & 5% Discount Section ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

import time
import uuid
import threading
import logging
import requests

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# === Constants ===
DEPOSIT_ADDRESS          = "UQBRiESLIYaCIL6q9s9frfp3ZGz2Yp29FBycV0GIRZdeY9zP"
TONCENTER_BASE_URL       = "https://toncenter.com"
TONCENTER_API_KEY        = ""
TONAPI_BASE_URL          = "https://tonapi.io"
NFT_API_KEY              = ""
NFT_COLLECTION_ADDRESS   = "0:28f760d832893182129cabe0a40864a4fcc817639168d523d6db4824bd997be6"
INSTR_IMG_URL            = "https://raw.githubusercontent.com/qnexst/404token/main/nft.jpg"

# === In-memory stores ===
pending_discount_memos   = {}  # memo -> user_id
last_discount_lts        = {}  # memo -> last logical time

# === Logging ===
logging.basicConfig(level=logging.INFO)

# === Helpers ===
def decode_memo(hex_or_plain: str) -> str:
    try:
        return bytes.fromhex(hex_or_plain).decode("utf-8")
    except Exception:
        return hex_or_plain

def has_nft_collection(account_address: str) -> bool:
    """Check via TonAPI if the given account holds at least one NFT from the target collection."""
    try:
        resp = requests.get(
            f"{TONAPI_BASE_URL}/v2/accounts/{account_address}/nfts",
            headers={"x-api-key": NFT_API_KEY},
            timeout=10
        ).json()
    except Exception as e:
        logging.error(f"TonAPI request failed: {e}")
        return False

    nft_items = resp.get("nft_items") or resp.get("result", {}).get("nfts")
    if not isinstance(nft_items, list):
        return False

    target = NFT_COLLECTION_ADDRESS.lower()
    for item in nft_items:
        if item.get("collection", {}).get("address", "").lower() == target:
            return True
    return False

# === Polling Thread for Both Top-Up & Discount ===
def poll_deposits():
    while True:
        try:
            data = requests.get(
                f"{TONCENTER_BASE_URL}/api/v2/getTransactions",
                params={
                    "address":  DEPOSIT_ADDRESS,
                    "limit":    50,
                    "archival": "true",
                    "api_key":  TONCENTER_API_KEY
                },
                timeout=10
            ).json()

            if not data.get("ok"):
                time.sleep(20)
                continue

            for tx in data["result"]:
                lt   = int(tx["transaction_id"]["lt"])
                memo = decode_memo(tx["in_msg"].get("message", ""))
                source = tx["in_msg"].get("source", "unknown")

                # --- Discount Verification Handling ---
                if memo in pending_discount_memos and lt > last_discount_lts.get(memo, 0):
                    last_discount_lts[memo] = lt
                    uid = pending_discount_memos.pop(memo)

                    # Check NFT and update database
                    has_nft = source != "unknown" and has_nft_collection(source)
                    db.child("users").child(str(uid)).update({"has_nft": has_nft})

                    # Prepare response
                    if has_nft:
                        resp_text = (
                            "üéâ <b>NFT Verified!</b>\n\n"
                            "Congratulations‚Äîyou hold an NFT from the collection.\n"
                            "Your 5% discount is now active on all services!"
                        )
                    else:
                        resp_text = (
                            "‚ùå <b>NFT Not Found</b>\n\n"
                            "We couldn't detect the NFT in your wallet.\n"
                            "No discount will be applied."
                        )

                    # Send confirmation
                    kb = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("üíº Go to Wallet", callback_data="wallet")
                    )
                    bot.send_message(
                        int(uid),
                        resp_text,
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                        reply_markup=kb
                    )

        except Exception as e:
            logging.error(f"Deposit polling error: {e}")

        time.sleep(5)

# Start the polling thread
threading.Thread(target=poll_deposits, daemon=True).start()

# === /discount Command & Menu ===
@bot.message_handler(commands=['discount'])
def cmd_discount(msg):
    uid  = str(msg.from_user.id)
    lang = get_lang(uid)

    if lang == "en":
        title = (
            "üéâ <b>NFT Holder Discount</b> üéâ\n\n"
            "Get 5% off all services! Verify your NFT to activate the discount.\n"
            "Click \"Next\" for instructions."
        )
        btn_next = "Next ‚û°Ô∏è"
        btn_cancel = "‚ùå Cancel"
    else:
        title = (
            "üéâ <b>–°–∫–∏–¥–∫–∞ –¥–ª—è –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π NFT</b> üéâ\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ 5% —Å–∫–∏–¥–∫—É –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–ª–∞–¥–µ–Ω–∏–µ NFT.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
        )
        btn_next = "–î–∞–ª–µ–µ ‚û°Ô∏è"
        btn_cancel = "‚ùå –û—Ç–º–µ–Ω–∞"

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton(btn_next, callback_data="discount_next"),
        InlineKeyboardButton(btn_cancel, callback_data="start_over")
    )
    bot.send_message(msg.chat.id, title, parse_mode="HTML", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data in ["discount_next", "discount_back"])
def cb_discount(c):
    bot.answer_callback_query(c.id)
    uid  = str(c.from_user.id)
    lang = get_lang(uid)

    if c.data == "discount_next":
        # Generate memo and save
        memo = uuid.uuid4().hex
        pending_discount_memos[memo] = uid

        if lang == "en":
            caption = (
                "‚ùó <b>Discount Verification</b>\n\n"
                "Send any amount of TON with the memo below to prove NFT ownership:\n\n"
                f"1Ô∏è‚É£ Address: <code>{DEPOSIT_ADDRESS}</code>\n"
                f"2Ô∏è‚É£ Memo:    <code>{memo}</code>\n\n"
                "<i>Link active for 20 minutes.</i>"
            )
            btn_back = "‚¨ÖÔ∏è Back"
        else:
            caption = (
                "‚ùó <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∫–∏–¥–∫–∏</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É TON —Å memo –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å NFT:\n\n"
                f"1Ô∏è‚É£ –ê–¥—Ä–µ—Å: <code>{DEPOSIT_ADDRESS}</code>\n"
                f"2Ô∏è‚É£ Memo:   <code>{memo}</code>\n\n"
                "<i>–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ 20 –º–∏–Ω—É—Ç.</i>"
            )
            btn_back = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

        btn_pay = InlineKeyboardButton("üí∏ Open Ton Keeper", url=f"ton://transfer/{DEPOSIT_ADDRESS}?text={memo}")
        btn_cancel = InlineKeyboardButton(btn_back, callback_data="discount_back")
        kb2 = InlineKeyboardMarkup().add(btn_pay).add(btn_cancel)

        bot.send_photo(c.message.chat.id, INSTR_IMG_URL, caption=caption, parse_mode="HTML", reply_markup=kb2)

    else:  # c.data == "discount_back"
        # Go back to initial discount menu
        cmd_discount(c.message)

# --------------------------------------------------------------------------- #
#                              Admin Broadcast                                #
# --------------------------------------------------------------------------- #
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, Message
)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ¬´—á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤¬ª –ø–æ—Å—Ç–æ–≤: admin_uid ‚Üí {"msg":Message, "preview_id":int}
pending_posts: dict[str, dict] = {}

def is_admin(uid: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return db.child("users").child(uid).child("is_admin").get().val() is True

# ‚îÄ‚îÄ /post ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=['post'])
def cmd_post(message: Message):
    uid = str(message.from_user.id)
    if not is_admin(uid):
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω

    # –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
    txt = "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç / —Ñ–æ—Ç–æ / –≤–∏–¥–µ–æ –∏ —Ç.–¥.)."
    ask = bot.send_message(uid, txt)
    bot.register_next_step_handler(ask, _capture_post)


def _capture_post(msg: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    uid = str(msg.from_user.id)
    if not is_admin(uid):
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ä–∏–≥–∏–Ω–∞–ª
    pending_posts[uid] = {"msg": msg}

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="post_send"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",       callback_data="post_cancel")
    )

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:
    if msg.content_type == "text":
        prev = bot.send_message(uid, msg.text, reply_markup=kb)
    elif msg.content_type == "photo":
        file_id = msg.photo[-1].file_id
        prev = bot.send_photo(uid, file_id, caption=msg.caption or "", reply_markup=kb)
    elif msg.content_type == "video":
        prev = bot.send_video(uid, msg.video.file_id,
                              caption=msg.caption or "", reply_markup=kb)
    else:
        prev = bot.send_message(uid, "‚ö†Ô∏è –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", reply_markup=kb)

    pending_posts[uid]["preview_id"] = prev.message_id

# ‚îÄ‚îÄ –æ–±—Ä–∞–±–æ—Ç–∫–∞ Confirm / Cancel ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.callback_query_handler(lambda c: c.data in ["post_send", "post_cancel"])
def cb_post_confirm(c):
    bot.answer_callback_query(c.id)
    uid = str(c.from_user.id)
    draft = pending_posts.get(uid)
    if not draft:
        return

    # –æ—Ç–º–µ–Ω–∞
    if c.data == "post_cancel":
        try:
            bot.delete_message(uid, draft["preview_id"])
        except Exception:
            pass
        pending_posts.pop(uid, None)
        bot.send_message(uid, "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Üí —Ä–∞—Å—Å—ã–ª–∞–µ–º
    src_msg: Message = draft["msg"]
    sent_cnt = 0

    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.child("users").get().val() or {}
    for user_uid, udata in users.items():
        try:
            # username –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            uname = udata.get("username") or udata.get("first_name", "user")
            mention = f"@{uname}"

            if src_msg.content_type == "text":
                text = src_msg.text.replace("@user", mention)
                bot.send_message(user_uid, text)
            elif src_msg.content_type == "photo":
                file_id = src_msg.photo[-1].file_id
                caption = (src_msg.caption or "").replace("@user", mention)
                bot.send_photo(user_uid, file_id, caption=caption)
            elif src_msg.content_type == "video":
                caption = (src_msg.caption or "").replace("@user", mention)
                bot.send_video(user_uid, src_msg.video.file_id, caption=caption)
            else:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã

            sent_cnt += 1
            # ‚ñ∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –º–∏–∫—Ä–æ-–∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å flood-limit
            time.sleep(0.05)
        except Exception as e:
            logging.error(f"[Broadcast] cannot send to {user_uid}: {e}")

    # –∏—Ç–æ–≥ –∞–¥–º–∏–Ω—É
    bot.edit_message_reply_markup(uid, draft["preview_id"], reply_markup=None)
    bot.send_message(uid, f"‚úÖ –ü–æ—Å—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {sent_cnt} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

    pending_posts.pop(uid, None)
# === Hosting Section ===
import os
import re
import zipfile
import tempfile
import shutil
import threading
import time
import requests
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiTelegramException
from github import Github, GithubException

# ‚Äî Configuration ‚Äî
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "YOUR_GITHUB_TOKEN")
GITHUB_USER  = "Arion-dbot"
GH_API_BASE  = "https://api.github.com"
HOST_PRICE   = 0.5   # TON per year

gh = Github(GITHUB_TOKEN)
gh_user = gh.get_user()

# ‚Äî In-memory state ‚Äî
awaiting_site_name = {}  # uid ‚Üí None (awaiting name) or site_name
awaiting_zip       = {}  # uid ‚Üí True when awaiting ZIP

# ‚Äî Firebase helpers ‚Äî  
def has_active_subscription(uid):
    sub = db.child("hosting_subs").child(uid).get().val() or {}
    return sub.get("expires", 0) > time.time()

def record_subscription(uid):
    now     = time.time()
    expires = now + 365*24*3600
    db.child("hosting_subs").child(uid).set({
        "start":     now,
        "expires":   expires,
        "site_name": None
    })
    return expires

# ‚Äî Expiry thread ‚Äî  
def schedule_expiry_check():
    while True:
        subs = db.child("hosting_subs").get().val() or {}
        now  = time.time()
        for uid, info in subs.items():
            if info.get("expires", 0) <= now:
                site = info.get("site_name")
                if site:
                    try: gh_user.get_repo(site).delete()
                    except: pass
                db.child("hosting_subs").child(uid).remove()
        time.sleep(24*3600)

threading.Thread(target=schedule_expiry_check, daemon=True).start()


# ‚Äî /hosting command ‚Äî  
@bot.message_handler(commands=['hosting'])
def cmd_hosting(msg):
    uid = str(msg.from_user.id)
    if not has_active_subscription(uid):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton(
            f"üí≥ –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω ‚Äî {HOST_PRICE} TON/–≥–æ–¥",
            callback_data="hosting_buy_plan"
        ))
        bot.send_message(
            msg.chat.id,
            f"üõ† –ß—Ç–æ–±—ã —Ö–æ—Å—Ç–∏—Ç—å —Å–∞–π—Ç, –∫—É–ø–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω –∑–∞ {HOST_PRICE} TON.",
            reply_markup=kb
        )
    else:
        # –º–µ–Ω—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Å–∞–π—Ç",       callback_data="hosting_new_site"),
            InlineKeyboardButton("üìã –ú–æ–∏ —Å–∞–π—Ç—ã",        callback_data="hosting_my_sites"),
        )
        kb.add(
            InlineKeyboardButton("üí≥ –ú–æ–π –ø–ª–∞–Ω",         callback_data="hosting_status"),
            InlineKeyboardButton("üîî –ü—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞–Ω",    callback_data="hosting_renew")
        )
        kb.add(
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",        callback_data="hosting_settings")
        )
        bot.send_message(
            msg.chat.id,
            "üè† *–ú–µ–Ω—é —Ö–æ—Å—Ç–∏–Ω–≥–∞*",
            parse_mode="Markdown",
            reply_markup=kb
        )


# ‚Äî –ö—É–ø–∏—Ç—å –ø–ª–∞–Ω ‚Äî  
@bot.callback_query_handler(lambda c: c.data=="hosting_buy_plan")
def cb_hosting_buy_plan(c):
    uid = str(c.from_user.id)
    bot.answer_callback_query(c.id)
    bal = fetch_balance(uid)
    if bal < HOST_PRICE:
        return bot.send_message(c.message.chat.id, t(uid, "no_balance"))
    save_balance(uid, bal - HOST_PRICE)
    expires = record_subscription(uid)
    bot.send_message(
        c.message.chat.id,
        f"‚úÖ –ü–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {datetime.fromtimestamp(expires):%Y-%m-%d}.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /hosting, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∞–π—Ç."
    )


# ‚Äî –ù–æ–≤—ã–π —Å–∞–π—Ç ‚Äî  
@bot.callback_query_handler(lambda c: c.data=="hosting_new_site")
def cb_hosting_new_site(c):
    uid = str(c.from_user.id)
    bot.answer_callback_query(c.id)
    awaiting_site_name[uid] = None
    bot.send_message(
        c.message.chat.id,
        "üåê *–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–∞–π—Ç–∞* (1‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤, `a‚Äìz0-9-`):",
        parse_mode="Markdown"
    )


# ‚Äî –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–∞–π—Ç–∞ ‚Äî  
def is_waiting_name(msg):
    uid = str(msg.from_user.id)
    return uid in awaiting_site_name and awaiting_site_name[uid] is None

@bot.message_handler(func=is_waiting_name)
def process_site_name(msg):
    uid  = str(msg.from_user.id)
    name = msg.text.strip().lower()
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not re.fullmatch(r'[a-z0-9-]{1,50}', name):
        return bot.send_message(
            msg.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1‚Äì50 —Å–∏–º–≤–æ–ª–æ–≤: `a‚Äìz0-9-`. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            parse_mode="Markdown"
        )
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    try:
        gh_user.get_repo(name)
        return bot.send_message(
            msg.chat.id,
            "‚ùå –≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ:",
            parse_mode="Markdown"
        )
    except GithubException:
        pass

    awaiting_site_name[uid] = name
    awaiting_zip[uid] = True
    bot.send_message(
        msg.chat.id,
        f"‚úÖ –ò–º—è —Å–∞–π—Ç–∞ `{name}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ ZIP —Å —Å–∞–π—Ç–æ–º (—Å `index.html`):",
        parse_mode="Markdown"
    )


# ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ ZIP ‚Äî  
def is_waiting_zip(msg):
    uid = str(msg.from_user.id)
    return uid in awaiting_zip and awaiting_zip[uid] and msg.content_type=='document'

@bot.message_handler(func=is_waiting_zip, content_types=['document'])
def process_hosting_zip(msg):
    uid       = str(msg.from_user.id)
    site_name = awaiting_site_name.get(uid)
    lang      = get_lang(uid)

    # —Å–∫–∞—á–∏–≤–∞–µ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    try:
        info = bot.get_file(msg.document.file_id)
        data = bot.download_file(info.file_path)
    except ApiTelegramException as e:
        if "file is too big" in str(e).lower():
            text = ("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 50 –ú–ë). –£–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä."
                    if lang=="ru" else
                    "‚ùå Your file is too large (max 50 MB). Please reduce size.")
            return bot.send_message(msg.chat.id, text)
        raise

    # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
    workdir  = tempfile.mkdtemp()
    zip_path = os.path.join(workdir, msg.document.file_name)
    with open(zip_path,'wb') as f: f.write(data)
    with zipfile.ZipFile(zip_path,'r') as z: z.extractall(workdir)

    # –∏—â–µ–º index.html
    publish_root = None
    for root,_,files in os.walk(workdir):
        if 'index.html' in files:
            publish_root = root; break
    if not publish_root:
        shutil.rmtree(workdir)
        awaiting_site_name.pop(uid); awaiting_zip.pop(uid)
        msg_text = ("‚ùå –í ZIP –Ω–µ—Ç `index.html`. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /hosting."
                    if lang=="ru" else
                    "‚ùå No `index.html` found. Restart with /hosting.")
        return bot.send_message(msg.chat.id, msg_text)

    # –ø—Ä–æ–º–æ—É—Ç –≤–ª–æ–∂–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if publish_root!=workdir:
        wd2 = tempfile.mkdtemp()
        for fn in os.listdir(publish_root):
            shutil.move(os.path.join(publish_root,fn), wd2)
        shutil.rmtree(workdir); workdir = wd2

    bot.send_message(
        msg.chat.id,
        ("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –¥–µ–ø–ª–æ—é‚Ä¶ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì5 –º–∏–Ω." if lang=="ru"
         else "‚è≥ Uploading & deploying‚Ä¶ may take 1‚Äì5 min.")
    )

    # —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º —Ä–µ–ø–æ
    try:
        repo = gh_user.get_repo(site_name)
        for item in repo.get_contents("",ref="main"):
            repo.delete_file(item.path, f"Clear {item.path}", item.sha, branch="main")
    except GithubException:
        repo = gh_user.create_repo(
            name=site_name, private=False,
            homepage=f"https://{GITHUB_USER}.github.io/{site_name}"
        )

    # –ø—É—à–∏–º —Ñ–∞–π–ª—ã
    for root,_,files in os.walk(workdir):
        for fn in files:
            full = os.path.join(root,fn)
            rel  = os.path.relpath(full,workdir).replace("\\","/")
            with open(full,'rb') as f: content=f.read()
            try:
                existing = repo.get_contents(rel,ref="main")
                repo.update_file(rel,f"Update {rel}",content,existing.sha,branch="main")
            except GithubException:
                repo.create_file(rel,f"Add {rel}",content,branch="main")

    # .nojekyll
    try: repo.get_contents(".nojekyll",ref="main")
    except: repo.create_file(".nojekyll","Disable Jekyll","",branch="main")

    # –≤–∫–ª—é—á–∞–µ–º Pages
    requests.post(
        f"{GH_API_BASE}/repos/{GITHUB_USER}/{site_name}/pages",
        json={"source":{"branch":"main","path":"/"}},
        headers={"Authorization":f"token {GITHUB_TOKEN}"}
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º site_name
    db.child("hosting_subs").child(uid).update({"site_name":site_name})

    shutil.rmtree(workdir)
    awaiting_zip.pop(uid)

    # –º–µ–Ω—é –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìã –ú–æ–∏ —Å–∞–π—Ç—ã",       callback_data="hosting_my_sites"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–∞–π—Ç",   callback_data="hosting_update_site"),
    )
    kb.add(
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç",    callback_data="hosting_delete_site"),
        InlineKeyboardButton("üí≥ –ú–æ–π –ø–ª–∞–Ω",        callback_data="hosting_status"),
    )
    kb.add(InlineKeyboardButton("üîî –ü—Ä–æ–¥–ª–∏—Ç—å –ø–ª–∞–Ω",callback_data="hosting_renew"))

    pages_url = f"https://{GITHUB_USER}.github.io/{site_name}/"
    msg_text = (f"‚úÖ –°–∞–π—Ç *{site_name}* –≤ –æ—á–µ—Ä–µ–¥–∏:\n{pages_url}\n"
                "‚ö†Ô∏è –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì5 –º–∏–Ω.")
    bot.send_message(msg.chat.id, msg_text, parse_mode="Markdown", reply_markup=kb)


# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ‚Äî  
@bot.callback_query_handler(lambda c: c.data=="hosting_my_sites")
def cb_my_sites(c):
    uid = str(c.from_user.id)
    sub = db.child("hosting_subs").child(uid).get().val() or {}
    site = sub.get("site_name")
    if not site:
        text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤." if get_lang(uid)=="ru" else "You have no sites."
    else:
        url = f"https://{GITHUB_USER}.github.io/{site}/"
        text = f"üñ• –í–∞—à —Å–∞–π—Ç: `{site}`\nüîó {url}" if get_lang(uid)=="ru" else f"üñ• Your site: `{site}`\nüîó {url}"
    bot.send_message(c.message.chat.id, text, parse_mode="Markdown")

@bot.callback_query_handler(lambda c: c.data=="hosting_update_site")
def cb_update_site(c):
    uid = str(c.from_user.id)
    if has_active_subscription(uid):
        awaiting_zip[uid] = True
        text = "üì¶ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π ZIP –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è." if get_lang(uid)=="ru" else "üì¶ Send new ZIP to update."
    else:
        text = "‚ùå –ü–ª–∞–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ö—É–ø–∏—Ç–µ —á–µ—Ä–µ–∑ /hosting." if get_lang(uid)=="ru" else "‚ùå No active plan‚Äîbuy via /hosting."
    bot.send_message(c.message.chat.id, text)

@bot.callback_query_handler(lambda c: c.data=="hosting_delete_site")
def cb_delete_site(c):
    uid = str(c.from_user.id)
    sub= db.child("hosting_subs").child(uid).get().val() or {}
    site=sub.get("site_name")
    if site:
        try: gh_user.get_repo(site).delete()
        except: pass
    db.child("hosting_subs").child(uid).remove()
    msg = f"üóë –°–∞–π—Ç `{site}` —É–¥–∞–ª—ë–Ω." if get_lang(uid)=="ru" else f"üóë Site `{site}` deleted."
    bot.send_message(c.message.chat.id, msg)

@bot.callback_query_handler(lambda c: c.data=="hosting_status")
def cb_status(c):
    uid = str(c.from_user.id)
    exp= db.child("hosting_subs").child(uid).get().val().get("expires",0)
    if exp>time.time():
        ts = datetime.fromtimestamp(exp).strftime('%Y-%m-%d')
        text = f"‚è≥ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {ts}" if get_lang(uid)=="ru" else f"‚è≥ Expires on: {ts}"
    else:
        text = "‚ùå –ü–ª–∞–Ω –∏—Å—Ç—ë–∫." if get_lang(uid)=="ru" else "‚ùå Plan expired."
    bot.send_message(c.message.chat.id, text)

@bot.callback_query_handler(lambda c: c.data=="hosting_renew")
def cb_renew(c):
    return cb_hosting_buy_plan(c)

# --------------------------------------------------------------------------- #
#                                  Run Loop                                   #
# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    threading.Thread(target=poll_deposits, daemon=True).start()
    bot.infinity_polling(skip_pending=True)
